{"version":3,"sources":["clock.ts"],"names":["timeTravelOffset","frozenTime","internalNow","Date","now","assertInTest","process","env","NODE_ENV","Error","timeTravel","time","undefined","restoreTime","freezeTime","unfreezeTime","Clock","Testing"],"mappings":"6PAAA,iCAEA,GAAIA,CAAAA,gBAAgB,CAAG,CAAvB,CACA,GAAIC,CAAAA,UAAJ,CAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAY,CAC5B,GAAID,UAAJ,CAAgB,CACZ,MAAOA,CAAAA,UAAP,CACH,CAED,MAAO,6BAAgB,GAAIE,CAAAA,IAAJ,EAAhB,CAA4BH,gBAA5B,CAAP,CACH,CAND,CAQA,GAAMI,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,EAAY,CACpB,MAAOF,CAAAA,WAAW,EAAlB,CACH,CAFD,CAIA,GAAMG,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAY,CAC7B,GAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,MAA7B,CAAqC,CACjC,KAAM,IAAIC,CAAAA,KAAJ,CAAU,uCAAV,CAAN,CACH,CACJ,CAJD,CAMA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAAOC,IAAP,uHACfN,YAAY,GACZL,gBAAgB,CAAG,sCAAyB,GAAIG,CAAAA,IAAJ,EAAzB,CAAqC,MAAOQ,CAAAA,IAAP,GAAgB,QAAhB,CAA2B,GAAIR,CAAAA,IAAJ,CAASQ,IAAT,CAA3B,CAA4CA,IAAjF,CAAnB,CACAV,UAAU,CAAGW,SAAb,CAHe,qEAAnB,CAMA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,4HAChBR,YAAY,GACZL,gBAAgB,CAAG,CAAnB,CACAC,UAAU,CAAGW,SAAb,CAHgB,sEAApB,CAMA,GAAME,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAAOH,IAAP,0HACfN,YAAY,GADG,IAEXM,IAFW,6EAGLD,UAAU,CAACC,IAAD,CAHL,SAMfV,UAAU,CAAGC,WAAW,EAAxB,CANe,sEAAnB,CASA,GAAMa,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,6HACjBV,YAAY,GACZJ,UAAU,CAAGW,SAAb,CAFiB,sEAArB,CAKO,GAAMI,CAAAA,KAAK,CAAG,CACjBZ,GAAG,CAAHA,GADiB,CAEjBa,OAAO,CAAE,CACLP,UAAU,CAAVA,UADK,CAELG,WAAW,CAAXA,WAFK,CAGLC,UAAU,CAAVA,UAHK,CAILC,YAAY,CAAZA,YAJK,CAFQ,CAAd,C","sourcesContent":["import { subMilliseconds, differenceInMilliseconds } from 'date-fns';\n\nlet timeTravelOffset = 0;\nlet frozenTime: Date | undefined;\n\nconst internalNow = (): Date => {\n    if (frozenTime) {\n        return frozenTime;\n    }\n\n    return subMilliseconds(new Date(), timeTravelOffset);\n}\n\nconst now = (): Date => {\n    return internalNow();\n}\n\nconst assertInTest = (): void => {\n    if (process.env.NODE_ENV !== 'test') {\n        throw new Error('Time travel is only allowed in tests!');\n    }\n}\n\nconst timeTravel = async (time: Date | string): Promise<void> => {\n    assertInTest();\n    timeTravelOffset = differenceInMilliseconds(new Date(), typeof time === 'string' ? new Date(time) : time);\n    frozenTime = undefined;\n}\n\nconst restoreTime = async (): Promise<void> => {\n    assertInTest();\n    timeTravelOffset = 0;\n    frozenTime = undefined;\n}\n\nconst freezeTime = async (time: Date | string | undefined): Promise<void> => {\n    assertInTest();\n    if (time) {\n        await timeTravel(time);\n    }\n\n    frozenTime = internalNow();\n}\n\nconst unfreezeTime = async (): Promise<void> => {\n    assertInTest();\n    frozenTime = undefined;\n}\n\nexport const Clock = {\n    now,\n    Testing: {\n        timeTravel,\n        restoreTime,\n        freezeTime,\n        unfreezeTime,\n    },\n};"]}