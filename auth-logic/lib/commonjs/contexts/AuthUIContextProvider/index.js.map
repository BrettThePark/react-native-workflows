{"version":3,"sources":["index.ts"],"names":["useInjectedUIContext","context","AuthUIContext","Error"],"mappings":"+OAYA,4BACA,kCACA,oCACA,8BASO,GAAMA,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,EAAkC,CAClE,GAAMC,CAAAA,OAAO,CAAG,sBAAWC,sBAAX,CAAhB,CACA,GAAID,OAAO,GAAK,IAAhB,CAAsB,CAClB,KAAM,IAAIE,CAAAA,KAAJ,CAAU,mEAAV,CAAN,CACH,CACD,MAAOF,CAAAA,OAAP,CACH,CANM,C","sourcesContent":["/**\n * The AuthUIContextProvider allows for application code to pass in middleware\n * actions that result from the Authentication and Registration user interface.\n * Often the actions will be the local storage and API calls satisfying\n * [[AuthUIActions]] and [[RegistrationUIActions]]. UI configuration properties\n * are also passed in.\n *\n * @packageDocumentation\n * @module AuthUIContextProvider\n * @preferred\n */\n\nimport { useContext } from 'react';\nimport { AuthUIContext } from './context';\nimport { AuthUIContextProvider } from './provider';\nimport { AuthUIContextProviderProps, RegistrationUIActions, AuthUIActions } from './types';\n\n/**\n * Allows for the module to grab the properties / actions passed in from the applications.\n *\n * @category Hooks\n * @private\n * @internal\n */\nexport const useInjectedUIContext = (): AuthUIContextProviderProps => {\n    const context = useContext(AuthUIContext);\n    if (context === null) {\n        throw new Error('useInjectedUIContext must be used within an AuthUIContextProvider');\n    }\n    return context;\n};\n\n/** @ignore */\nexport type { AuthUIContextProviderProps, RegistrationUIActions, AuthUIActions };\n/** @ignore */\nexport { AuthUIContextProvider };\n"]}