{"version":3,"sources":["reducer.ts"],"names":["defaultAccountUIReducer","prevState","action","type","login","email","payload","isLogOut","errorMessage","initialAccountUIState","forgotPassword","initialTransitState","transitId","setPassword","verifyResetCodeTransit","setPasswordTransit"],"mappings":"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","sourcesContent":["/**\n * @packageDocumentation\n * @module AccountUIContext\n */\n\nimport { AccountUIState, initialAccountUIState } from './state';\nimport { AccountUIReducer } from './types';\nimport { initialTransitState, transitStart, transitSuccess, transitFailed } from '../TransitState';\nimport { AccountActions } from './dispatchActions';\n\n/**\n * Default reducer for global [[AccountUIState]].\n *\n * @param prevState Previous [[AccountUIState]] to update.\n * @param action State change action, which should be of type [[AccountActions]].\n */\nexport const defaultAccountUIReducer: AccountUIReducer = (prevState: AccountUIState, action: AccountActions) => {\n    switch (action.type) {\n        // Login\n        case 'Authentication/Login/Started':\n            return {\n                ...prevState,\n                login: {\n                    ...transitStart(),\n                    email: action.payload.email,\n                },\n                isLogOut: false,\n                email: action.payload.email,\n            };\n        case 'Authentication/Login/Succeeded':\n            return {\n                ...prevState,\n                login: {\n                    ...transitSuccess(),\n                    email: action.payload.email,\n                },\n                isLogOut: false,\n                email: action.payload.email,\n            };\n        case 'Authentication/Login/Failed':\n            return {\n                ...prevState,\n                login: {\n                    ...transitFailed(action.payload.errorMessage),\n                    email: action.payload.email,\n                },\n                isLogOut: false,\n                email: action.payload.email,\n            };\n\n        // Logout\n        case 'Authentication/Logout/Reset':\n            return {\n                ...initialAccountUIState,\n                isLogOut: true,\n            };\n\n        // Reset Password (\"forgot password\" request)\n        case 'Authentication/ResetPassword/Reset':\n            return {\n                ...prevState,\n                forgotPassword: {\n                    ...initialTransitState,\n                    email: null,\n                },\n            };\n        case 'Authentication/ResetPassword/Started':\n            return {\n                ...prevState,\n                forgotPassword: {\n                    ...transitStart(action.payload.transitId),\n                    email: action.payload.email,\n                },\n            };\n        case 'Authentication/ResetPassword/Succeeded':\n            if (prevState.forgotPassword.transitId !== action.payload.transitId) {\n                return prevState;\n            }\n\n            return {\n                ...prevState,\n                forgotPassword: {\n                    ...transitSuccess(action.payload.transitId),\n                    email: action.payload.email,\n                },\n            };\n        case 'Authentication/ResetPassword/Failed':\n            if (prevState.forgotPassword.transitId !== action.payload.transitId) {\n                return prevState;\n            }\n\n            return {\n                ...prevState,\n                forgotPassword: {\n                    ...transitFailed(action.payload.errorMessage, action.payload.transitId),\n                    email: action.payload.email,\n                },\n            };\n\n        // Verify code for reset password (code from \"forgot password\" email)\n        case 'Authentication/VerifyResetCode/Reset':\n            return {\n                ...prevState,\n                setPassword: {\n                    ...prevState.setPassword,\n                    verifyResetCodeTransit: initialTransitState,\n                },\n            };\n        case 'Authentication/VerifyResetCode/Started':\n            return {\n                ...prevState,\n                setPassword: {\n                    ...prevState.setPassword,\n                    verifyResetCodeTransit: transitStart(action.payload.transitId),\n                },\n            };\n        case 'Authentication/VerifyResetCode/Succeeded':\n            if (prevState.setPassword.verifyResetCodeTransit.transitId !== action.payload.transitId) {\n                return prevState;\n            }\n\n            return {\n                ...prevState,\n                setPassword: {\n                    ...prevState.setPassword,\n                    verifyResetCodeTransit: transitSuccess(action.payload.transitId),\n                },\n            };\n        case 'Authentication/VerifyResetCode/Failed':\n            if (prevState.setPassword.verifyResetCodeTransit.transitId !== action.payload.transitId) {\n                return prevState;\n            }\n\n            return {\n                ...prevState,\n                setPassword: {\n                    ...prevState.setPassword,\n                    verifyResetCodeTransit: transitFailed(action.payload.errorMessage, action.payload.transitId),\n                },\n            };\n\n        // Set password (after a \"forgot password\" request and verifying a code)\n        case 'Authentication/SetPassword/Reset':\n            return {\n                ...prevState,\n                setPassword: {\n                    ...prevState.setPassword,\n                    setPasswordTransit: initialTransitState,\n                },\n            };\n        case 'Authentication/SetPassword/Started':\n            return {\n                ...prevState,\n                setPassword: {\n                    ...prevState.setPassword,\n                    setPasswordTransit: transitStart(action.payload.transitId),\n                },\n            };\n        case 'Authentication/SetPassword/Succeeded':\n            if (prevState.setPassword.setPasswordTransit.transitId !== action.payload.transitId) {\n                return prevState;\n            }\n\n            return {\n                ...prevState,\n                setPassword: {\n                    ...prevState.setPassword,\n                    setPasswordTransit: transitSuccess(action.payload.transitId),\n                },\n            };\n        case 'Authentication/SetPassword/Failed':\n            if (prevState.setPassword.setPasswordTransit.transitId !== action.payload.transitId) {\n                return prevState;\n            }\n\n            return {\n                ...prevState,\n                setPassword: {\n                    ...prevState.setPassword,\n                    setPasswordTransit: transitFailed(action.payload.errorMessage, action.payload.transitId),\n                },\n            };\n\n        default:\n            return prevState;\n    }\n};\n"]}