{"version":3,"sources":["index.ts"],"names":["useRegistrationUIState","context","RegistrationStateContext","Error","useRegistrationUIActions","RegistrationActionContext"],"mappings":"43BASA,4BACA,kCAEA,uRACA,+RACA,kCACA,kDASO,GAAMA,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,EAA2B,CAC7D,GAAMC,CAAAA,OAAO,CAAG,sBAAWC,iCAAX,CAAhB,CACA,GAAID,OAAO,GAAK,IAAhB,CAAsB,CAClB,KAAM,IAAIE,CAAAA,KAAJ,CAAU,qEAAV,CAAN,CACH,CACD,MAAOF,CAAAA,OAAP,CACH,CANM,C,sDAaA,GAAMG,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,EAAoC,CACxE,GAAMH,CAAAA,OAAO,CAAG,sBAAWI,kCAAX,CAAhB,CACA,GAAIJ,OAAO,GAAK,IAAhB,CAAsB,CAClB,KAAM,IAAIE,CAAAA,KAAJ,CAAU,uEAAV,CAAN,CACH,CACD,MAAOF,CAAAA,OAAP,CACH,CANM,C","sourcesContent":["/**\n * RegistrationStateContext and RegistrationActionContext provide access to global state and actions for registration related information (load EULA, complete registration, etc.).\n *\n * @packageDocumentation\n * @module RegistrationUIContext\n * @internal\n * @preferred\n */\n\nimport { useContext } from 'react';\nimport { RegistrationStateContext, RegistrationActionContext } from './context';\n\nexport * from './types';\nexport * from './reducer';\nimport { RegistrationActionsCreator } from './actions';\nimport { RegistrationActions } from './dispatchActions';\nimport { RegistrationUIState } from './state';\nimport { RegistrationUIContextActions } from './types';\n\n/**\n * Hook for using the global account state for account-related global [[RegistrationUIState]] state changes (i.e. loading EULA, registration via invite).\n *\n * @category Hooks\n */\nexport const useRegistrationUIState = (): RegistrationUIState => {\n    const context = useContext(RegistrationStateContext);\n    if (context === null) {\n        throw new Error('useRegistrationUIState must be used within an RegistrationUIContext');\n    }\n    return context;\n};\n\n/**\n * Hook for using the global [[RegistrationUIActions]] actions (i.e. loadEULA, completeRegistration, etc.) which change the global [[RegistrationUIState]].\n *\n * @category Hooks\n */\nexport const useRegistrationUIActions = (): RegistrationUIContextActions => {\n    const context = useContext(RegistrationActionContext);\n    if (context === null) {\n        throw new Error('useRegistrationUIActions must be used within an RegistrationUIContext');\n    }\n    return context;\n};\n\nexport { RegistrationActionContext, RegistrationStateContext, RegistrationActionsCreator, RegistrationActions };\n"]}