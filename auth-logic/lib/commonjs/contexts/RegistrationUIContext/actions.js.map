{"version":3,"sources":["actions.ts"],"names":["RegistrationActionsCreator","injectedActions","dispatch","loadEULA","language","transitId","Math","random","DispatchActions","loadEulaStarted","eulaText","loadEulaSucceeded","loadEulaFailed","message","requestRegistrationCode","email","requestRegistrationCodeStarted","requestRegistrationCodeSucceeded","requestRegistrationCodeFailed","validateUserRegistrationRequest","validationCode","validationEmail","validateUserRegistrationStarted","registrationComplete","validateUserRegistrationSucceeded","validateUserRegistrationFailed","completeRegistration","userData","registerUserStarted","userDetails","registerUserSucceeded","organizationName","registerUserFailed"],"mappings":"kRAKA,kDAkBO,GAAMA,CAAAA,0BAAwD,CAAG,QAA3DA,CAAAA,0BAA2D,CACpEC,eADoE,CAEpEC,QAFoE,QAGnE,kBAA8B,CAC/BC,QAAQ,CAAE,kBAAOC,QAAP,4IACAC,SADA,CACYC,IAAI,CAACC,MAAL,EADZ,CAGNL,QAAQ,CAACM,qCAAgBC,eAAhB,CAAgCJ,SAAhC,CAA2CD,QAA3C,CAAD,CAAR,CAHM,kEAKqBH,eAAe,CAACE,QAAhB,CAAyBC,QAAzB,CALrB,SAKIM,QALJ,eAMFR,QAAQ,CAACM,qCAAgBG,iBAAhB,CAAkCN,SAAlC,CAAD,CAAR,CANE,gCAOKK,QAPL,4DASFR,QAAQ,CAACM,qCAAgBI,cAAhB,CAA+BP,SAA/B,CAA0C,YAAMQ,OAAhD,CAAD,CAAR,CATE,4FADqB,CAc/BC,uBAAuB,CAAE,iCAAOC,KAAP,qJACfV,SADe,CACHC,IAAI,CAACC,MAAL,EADG,CAErBL,QAAQ,CAACM,qCAAgBQ,8BAAhB,CAA+CX,SAA/C,CAAD,CAAR,CAFqB,oEAIXJ,eAAe,CAACa,uBAAhB,CAAwCC,KAAxC,CAJW,SAKjBb,QAAQ,CAACM,qCAAgBS,gCAAhB,CAAiDZ,SAAjD,CAAD,CAAR,CALiB,mFAOjBH,QAAQ,CAACM,qCAAgBU,6BAAhB,CAA8Cb,SAA9C,CAAyD,aAAMQ,OAA/D,CAAD,CAAR,CAPiB,0EAdM,CAwB/BM,+BAA+B,CAAE,yCAAOC,cAAP,CAA+BC,eAA/B,kLACvBhB,SADuB,CACXC,IAAI,CAACC,MAAL,EADW,CAG7BL,QAAQ,CAACM,qCAAgBc,+BAAhB,CAAgDjB,SAAhD,CAAD,CAAR,CAH6B,oEAKUJ,eAAe,CAACkB,+BAAhB,CAC/BC,cAD+B,CAE/BC,eAF+B,CALV,SAKnBE,oBALmB,gBASzBrB,QAAQ,CAACM,qCAAgBgB,iCAAhB,CAAkDnB,SAAlD,CAAD,CAAR,CATyB,iCAUlBkB,oBAVkB,oEAarBH,cAAc,GAAK,gCAbE,4BAcrBlB,QAAQ,CAACM,qCAAgBgB,iCAAhB,CAAkDnB,SAAlD,CAAD,CAAR,CAdqB,iCAed,KAfc,UAkBzBH,QAAQ,CAACM,qCAAgBiB,8BAAhB,CAA+CpB,SAA/C,CAA0D,aAAMQ,OAAhE,CAAD,CAAR,CAlByB,8FAxBF,CA8C/Ba,oBAAoB,CAAE,8BAClBC,QADkB,CAKlBP,cALkB,CAMlBC,eANkB,8JAQZhB,SARY,CAQAC,IAAI,CAACC,MAAL,EARA,CAUlBL,QAAQ,CAACM,qCAAgBoB,mBAAhB,CAAoCvB,SAApC,CAAD,CAAR,CAVkB,oEAaYJ,eAAe,CAACyB,oBAAhB,CAAqCC,QAArC,CAA+CP,cAA/C,CAA+DC,eAA/D,CAbZ,SAaRQ,WAbQ,gBAcd3B,QAAQ,CAACM,qCAAgBsB,qBAAhB,CAAsCzB,SAAtC,CAAiDwB,WAAW,CAACd,KAA7D,CAAoEc,WAAW,CAACE,gBAAhF,CAAD,CAAR,CAdc,iCAePF,WAfO,+DAiBd3B,QAAQ,CAACM,qCAAgBwB,kBAAhB,CAAmC3B,SAAnC,CAA8C,aAAMQ,OAApD,CAAD,CAAR,CAjBc,8FA9CS,CAA9B,EAHmE,EAAjE,C","sourcesContent":["/**\n * @packageDocumentation\n * @module RegistrationUIContext\n */\n\nimport { RegistrationActions as DispatchActions } from './dispatchActions';\nimport { AccountDetailInformation } from '../../types/AccountDetails';\nimport { RegistrationUIActions } from '../AuthUIContextProvider';\n\ntype RegistrationUIActionsFunction = () => RegistrationUIActions;\ntype RegistrationUIActionsCreator = (\n    injectedActions: RegistrationUIActions,\n    dispatch: React.Dispatch<DispatchActions>\n) => RegistrationUIActionsFunction;\n\n/**\n * Implementation of actions for altering the global [[RegistrationUIState]] via [[RegistrationUIActions]] calls.\n * Uses actions injected into the app to make network calls, and then updates the global state accordingly\n * using by dispatching [[RegistrationActions]] to the [[registrationReducer]].\n *\n * @param injectedActions Implementation of network activities.\n * @param dispatch For updating reducer upon completion of network activities.\n */\nexport const RegistrationActionsCreator: RegistrationUIActionsCreator = (\n    injectedActions,\n    dispatch\n) => (): RegistrationUIActions => ({\n    loadEULA: async (language: string): Promise<string> => {\n        const transitId = Math.random();\n\n        dispatch(DispatchActions.loadEulaStarted(transitId, language));\n        try {\n            const eulaText = await injectedActions.loadEULA(language);\n            dispatch(DispatchActions.loadEulaSucceeded(transitId));\n            return eulaText;\n        } catch (error) {\n            dispatch(DispatchActions.loadEulaFailed(transitId, error.message));\n            throw error;\n        }\n    },\n    requestRegistrationCode: async (email: string): Promise<void> => {\n        const transitId = Math.random();\n        dispatch(DispatchActions.requestRegistrationCodeStarted(transitId));\n        try {\n            await injectedActions.requestRegistrationCode(email);\n            dispatch(DispatchActions.requestRegistrationCodeSucceeded(transitId));\n        } catch (error) {\n            dispatch(DispatchActions.requestRegistrationCodeFailed(transitId, error.message));\n        }\n    },\n    validateUserRegistrationRequest: async (validationCode: string, validationEmail?: string): Promise<boolean> => {\n        const transitId = Math.random();\n\n        dispatch(DispatchActions.validateUserRegistrationStarted(transitId));\n        try {\n            const registrationComplete = await injectedActions.validateUserRegistrationRequest(\n                validationCode,\n                validationEmail\n            );\n            dispatch(DispatchActions.validateUserRegistrationSucceeded(transitId));\n            return registrationComplete;\n        } catch (error) {\n            // Need this for debug. No real security risk\n            if (validationCode === 'DEBUG_VALIDATION_CODE_DEADBEEF') {\n                dispatch(DispatchActions.validateUserRegistrationSucceeded(transitId));\n                return false;\n            }\n\n            dispatch(DispatchActions.validateUserRegistrationFailed(transitId, error.message));\n            throw error;\n        }\n    },\n    completeRegistration: async (\n        userData: {\n            password: string;\n            accountDetails: AccountDetailInformation;\n        },\n        validationCode: string,\n        validationEmail?: string\n    ): Promise<{ email: string; organizationName: string }> => {\n        const transitId = Math.random();\n\n        dispatch(DispatchActions.registerUserStarted(transitId));\n\n        try {\n            const userDetails = await injectedActions.completeRegistration(userData, validationCode, validationEmail);\n            dispatch(DispatchActions.registerUserSucceeded(transitId, userDetails.email, userDetails.organizationName));\n            return userDetails;\n        } catch (error) {\n            dispatch(DispatchActions.registerUserFailed(transitId, error.message));\n            throw error;\n        }\n    },\n});\n"]}