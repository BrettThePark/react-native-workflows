{"version":3,"sources":["reducer.ts"],"names":["reducer","prevState","action","type","email","payload","userId","rememberMeDetails","rememberMe","undefined","isLoading","isSignOut","isAuthenticatedUser","isShowingChangePassword","overrideExists","overrideRememberMeEmail","length","rememberEmail","clearRememberMe"],"mappings":"0iCA0BO,GAAMA,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,SAAD,CAAkCC,MAAlC,CAA2E,CAC9F,OAAQA,MAAM,CAACC,IAAf,EACI,IAAK,mBAAL,CACI,MAAO,CACHC,KAAK,CAAEF,MAAM,CAACG,OAAP,CAAeD,KADnB,CAEHE,MAAM,CAAEJ,MAAM,CAACG,OAAP,CAAeC,MAFpB,CAGHC,iBAAiB,CAAE,CACfH,KAAK,CAAEF,MAAM,CAACG,OAAP,CAAeG,UAAf,CAA4BN,MAAM,CAACG,OAAP,CAAeD,KAA3C,CAAmDK,SAD3C,CAEfD,UAAU,CAAEN,MAAM,CAACG,OAAP,CAAeG,UAFZ,CAHhB,CAOHE,SAAS,CAAE,KAPR,CAQHC,SAAS,CAAE,KARR,CASHC,mBAAmB,CAAE,IATlB,CAUHC,uBAAuB,CAAE,KAVtB,CAAP,CAYJ,IAAK,sBAAL,CAA6B,kDACzB,GAAMC,CAAAA,cAAc,CAAG,gDAACZ,MAAM,CAACG,OAAP,CAAeU,uBAAhB,iDAAC,uBAAwCC,MAAzC,+DAAmD,CAAnD,EAAwD,CAA/E,CACA,GAAIC,CAAAA,aAAa,CAAGhB,SAAS,CAACM,iBAAV,CAA4BH,KAAhD,CACA,GAAII,CAAAA,UAAU,CAAGP,SAAS,CAACM,iBAAV,CAA4BC,UAA7C,CACA,GAAIM,cAAJ,CAAoB,CAChBG,aAAa,CAAGf,MAAM,CAACG,OAAP,CAAeU,uBAA/B,CACAP,UAAU,CAAG,IAAb,CACH,CAHD,IAGO,IAAIN,MAAM,CAACG,OAAP,CAAea,eAAnB,CAAoC,CACvCD,aAAa,CAAGR,SAAhB,CACAD,UAAU,CAAG,KAAb,CACH,CAED,MAAO,CACHJ,KAAK,CAAEK,SADJ,CAEHH,MAAM,CAAEG,SAFL,CAGHF,iBAAiB,CAAE,CACfH,KAAK,CAAEa,aADQ,CAEfT,UAAU,CAAEA,UAFG,CAHhB,CAOHE,SAAS,CAAE,KAPR,CAQHC,SAAS,CAAE,IARR,CASHC,mBAAmB,CAAE,KATlB,CAUHC,uBAAuB,CAAE,KAVtB,CAAP,CAYH,CACD,IAAK,oBAAL,CACI,sCACOZ,SADP,MAEIY,uBAAuB,CAAE,IAF7B,GAIJ,IAAK,oBAAL,CACI,sCACOZ,SADP,MAEIY,uBAAuB,CAAE,KAF7B,GAIJ,QACI,MAAOZ,CAAAA,SAAP,CAlDR,CAoDH,CArDM,C","sourcesContent":["/**\n * @packageDocumentation\n * @module SecurityContextProvider\n */\n\nimport { SecurityContextState } from './types';\n\n/**\n * @internal\n * @private\n */\nexport type Action =\n    | { type: 'userAuthenticated'; payload: { email: string; userId: string; rememberMe: boolean } }\n    | { type: 'userNotAuthenticated'; payload: { clearRememberMe?: boolean; overrideRememberMeEmail?: string } }\n    | { type: 'showChangePassword' }\n    | { type: 'hideChangePassword' };\n\n/**\n * @internal\n * @private\n *\n * Reducer for [[SecurityContextProvider]].\n *\n * @param prevState Previous [[SecurityContextState]] to update.\n * @param action State change action, which should be of type [[Action]].\n */\nexport const reducer = (prevState: SecurityContextState, action: Action): SecurityContextState => {\n    switch (action.type) {\n        case 'userAuthenticated':\n            return {\n                email: action.payload.email,\n                userId: action.payload.userId,\n                rememberMeDetails: {\n                    email: action.payload.rememberMe ? action.payload.email : undefined,\n                    rememberMe: action.payload.rememberMe,\n                },\n                isLoading: false,\n                isSignOut: false,\n                isAuthenticatedUser: true,\n                isShowingChangePassword: false,\n            };\n        case 'userNotAuthenticated': {\n            const overrideExists = (action.payload.overrideRememberMeEmail?.length ?? 0) > 0;\n            let rememberEmail = prevState.rememberMeDetails.email;\n            let rememberMe = prevState.rememberMeDetails.rememberMe;\n            if (overrideExists) {\n                rememberEmail = action.payload.overrideRememberMeEmail;\n                rememberMe = true;\n            } else if (action.payload.clearRememberMe) {\n                rememberEmail = undefined;\n                rememberMe = false;\n            }\n\n            return {\n                email: undefined,\n                userId: undefined,\n                rememberMeDetails: {\n                    email: rememberEmail,\n                    rememberMe: rememberMe,\n                },\n                isLoading: false,\n                isSignOut: true,\n                isAuthenticatedUser: false,\n                isShowingChangePassword: false,\n            };\n        }\n        case 'showChangePassword':\n            return {\n                ...prevState,\n                isShowingChangePassword: true,\n            };\n        case 'hideChangePassword':\n            return {\n                ...prevState,\n                isShowingChangePassword: false,\n            };\n        default:\n            return prevState;\n    }\n};\n"]}