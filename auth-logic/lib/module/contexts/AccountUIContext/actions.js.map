{"version":3,"sources":["actions.ts"],"names":["AccountActionsCreator","injectedActions","dispatch","initiateSecurity","logIn","email","password","rememberMe","transitId","Math","random","DispatchActions","loginStarted","loginFailed","message","forgotPassword","resetPasswordStarted","resetPasswordSucceeded","resetPasswordFailed","verifyResetCode","code","verifyResetCodeStarted","verifyResetCodeSucceeded","verifyResetCodeFailed","setPassword","setPasswordStarted","setPasswordSucceeded","setPasswordFailed","changePassword"],"mappings":"gQAKA,kDAiBO,GAAMA,CAAAA,qBAA8C,CAAG,QAAjDA,CAAAA,qBAAiD,CAACC,eAAD,CAAkBC,QAAlB,QAA+B,kBAAyB,CAClHC,gBAAgB,CAAE,yMACRF,eAAe,CAACE,gBAAhB,EADQ,uEADgG,CAIlHC,KAAK,CAAE,eAAOC,KAAP,CAAsBC,QAAtB,CAAwCC,UAAxC,mIACGC,SADH,CACeC,IAAI,CAACC,MAAL,EADf,CAEHR,QAAQ,CAACS,gCAAgBC,YAAhB,CAA6BP,KAA7B,CAAoCG,SAApC,CAAD,CAAR,CAFG,oEAIOP,eAAe,CAACG,KAAhB,CAAsBC,KAAtB,CAA6BC,QAA7B,CAAuCC,UAAvC,CAJP,4FAiBCL,QAAQ,CAACS,gCAAgBE,WAAhB,CAA4BR,KAA5B,CAAmCG,SAAnC,CAA8C,aAAMM,OAApD,CAAD,CAAR,CAjBD,0EAJ2G,CAwBlHC,cAAc,CAAE,wBAAOV,KAAP,4IACNG,SADM,CACMC,IAAI,CAACC,MAAL,EADN,CAEZR,QAAQ,CAACS,gCAAgBK,oBAAhB,CAAqCX,KAArC,CAA4CG,SAA5C,CAAD,CAAR,CAFY,oEAIFP,eAAe,CAACc,cAAhB,CAA+BV,KAA/B,CAJE,SAKRH,QAAQ,CAACS,gCAAgBM,sBAAhB,CAAuCZ,KAAvC,CAA8CG,SAA9C,CAAD,CAAR,CALQ,mFAORN,QAAQ,CAACS,gCAAgBO,mBAAhB,CAAoCb,KAApC,CAA2CG,SAA3C,CAAsD,aAAMM,OAA5D,CAAD,CAAR,CAPQ,0EAxBkG,CAkClHK,eAAe,CAAE,yBAAOC,IAAP,CAAqBf,KAArB,6IACPG,SADO,CACKC,IAAI,CAACC,MAAL,EADL,CAEbR,QAAQ,CAACS,gCAAgBU,sBAAhB,CAAuCb,SAAvC,CAAD,CAAR,CAFa,oEAIHP,eAAe,CAACkB,eAAhB,CAAgCC,IAAhC,CAAsCf,KAAtC,CAJG,SAKTH,QAAQ,CAACS,gCAAgBW,wBAAhB,CAAyCd,SAAzC,CAAD,CAAR,CALS,wFAQLY,IAAI,GAAK,gCARJ,4BASLlB,QAAQ,CAACS,gCAAgBW,wBAAhB,CAAyCd,SAAzC,CAAD,CAAR,CATK,0CAaTN,QAAQ,CAACS,gCAAgBY,qBAAhB,CAAsCf,SAAtC,CAAiD,aAAMM,OAAvD,CAAD,CAAR,CAbS,0EAlCiG,CAkDlHU,WAAW,CAAE,qBAAOJ,IAAP,CAAqBd,QAArB,CAAuCD,KAAvC,yIACHG,SADG,CACSC,IAAI,CAACC,MAAL,EADT,CAETR,QAAQ,CAACS,gCAAgBc,kBAAhB,CAAmCjB,SAAnC,CAAD,CAAR,CAFS,oEAICP,eAAe,CAACuB,WAAhB,CAA4BJ,IAA5B,CAAkCd,QAAlC,CAA4CD,KAA5C,CAJD,SAKLH,QAAQ,CAACS,gCAAgBe,oBAAhB,CAAqClB,SAArC,CAAD,CAAR,CALK,mFAOLN,QAAQ,CAACS,gCAAgBgB,iBAAhB,CAAkCnB,SAAlC,CAA6C,aAAMM,OAAnD,CAAD,CAAR,CAPK,0EAlDqG,CA4DlHc,cAAc,CAAE3B,eAAe,CAAC2B,cA5DkF,CAAzB,EAA/B,EAAvD,C","sourcesContent":["/**\n * @packageDocumentation\n * @module AccountUIContext\n */\n\nimport { AccountActions as DispatchActions } from './dispatchActions';\nimport { AccountUIActions } from './types';\n\ntype AccountUIActionsFunction = () => AccountUIActions;\ntype AccountUIActionsCreator = (\n    injectedActions: AccountUIActions,\n    dispatch: React.Dispatch<DispatchActions>\n) => AccountUIActionsFunction;\n\n/**\n * Implementation of actions for altering the global [[AccountUIState]] via [[AuthUIActions]] calls.\n * Uses actions injected into the app to make network calls, and then updates the global state accordingly\n * using by dispatching [[AccountActions]] to the [[defaultAccountUIReducer]].\n *\n * @param injectedActions Implementation of network activities.\n * @param dispatch For updating reducer upon completion of network activities.\n */\nexport const AccountActionsCreator: AccountUIActionsCreator = (injectedActions, dispatch) => (): AccountUIActions => ({\n    initiateSecurity: async (): Promise<void> => {\n        await injectedActions.initiateSecurity();\n    },\n    logIn: async (email: string, password: string, rememberMe: boolean): Promise<void> => {\n        const transitId = Math.random();\n        dispatch(DispatchActions.loginStarted(email, transitId));\n        try {\n            await injectedActions.logIn(email, password, rememberMe);\n            // The login action *MUST* call the SecurityAction upon Authentication\n            // The relevant contexts should be unmounted before we can update,\n            // so this state can never be reached in reality\n            //\n            // Stated another way:\n            // The UIOnlyAuthActions (or relevant provided Action from the app) should\n            // tell the SecurityContext that the user is authenticated, which causes this\n            // context to be unmounted (or removed, kind of like de-allocated).\n            // By dispatching loginSucceeded we are calling an dispatch on something that\n            // is no longer on screen, which causes an error.\n            // dispatch(DispatchActions.loginSucceeded(email, transitId));\n        } catch (error) {\n            dispatch(DispatchActions.loginFailed(email, transitId, error.message));\n        }\n    },\n    forgotPassword: async (email: string): Promise<void> => {\n        const transitId = Math.random();\n        dispatch(DispatchActions.resetPasswordStarted(email, transitId));\n        try {\n            await injectedActions.forgotPassword(email);\n            dispatch(DispatchActions.resetPasswordSucceeded(email, transitId));\n        } catch (error) {\n            dispatch(DispatchActions.resetPasswordFailed(email, transitId, error.message));\n        }\n    },\n    verifyResetCode: async (code: string, email?: string): Promise<void> => {\n        const transitId = Math.random();\n        dispatch(DispatchActions.verifyResetCodeStarted(transitId));\n        try {\n            await injectedActions.verifyResetCode(code, email);\n            dispatch(DispatchActions.verifyResetCodeSucceeded(transitId));\n        } catch (error) {\n            // Need this for debug. No real security risk\n            if (code === 'DEBUG_VALIDATION_CODE_DEADBEEF') {\n                dispatch(DispatchActions.verifyResetCodeSucceeded(transitId));\n                return;\n            }\n\n            dispatch(DispatchActions.verifyResetCodeFailed(transitId, error.message));\n        }\n    },\n    setPassword: async (code: string, password: string, email?: string): Promise<void> => {\n        const transitId = Math.random();\n        dispatch(DispatchActions.setPasswordStarted(transitId));\n        try {\n            await injectedActions.setPassword(code, password, email);\n            dispatch(DispatchActions.setPasswordSucceeded(transitId));\n        } catch (error) {\n            dispatch(DispatchActions.setPasswordFailed(transitId, error.message));\n        }\n    },\n    changePassword: injectedActions.changePassword,\n});\n"]}